name: build-app
on:
  push:
    branches: [master]

jobs:

  build_lib:
    runs-on: ubuntu-latest
      steps:
          - name: "Checkout latest code"
            uses: actions/checkout@v2

          - name: Set up JDK 8
            uses: actions/setup-java@v2
            with:
              java-version: '8'
              distribution: 'adopt'

          - name: "Make gradlew executable"
            run: chmod +x ./gradlew

          - name: test
            run: ./gradlew test

          - name: build lib
            run: ./gradlew buildLib

          - name: extract_artifact
            uses: actions/upload-artifact@master
            with:
              name: lib.jar
              path: ./lib/build/libs

  build_apk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'

      - name: Install APkSigner
        run: sudo apt-get install -y apksigner

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: test
        run: ./gradlew test

      - name: "Create Keystore folder"
        run: |
          mkdir .keys

      - name: "Generate Keystore File"
        id: keystore
        uses: timheuer/base64-to-file@v1
        with:
          fileName: '.keys/h300s.keystore'
          encodedString: ${{ secrets.SIGN_KEY }}

      - name: "Build APK"
        id: "apk_unsigned"
        run: |
          ./gradlew assembleRelease
          ls -l ./app/build/outputs/apk/release
          echo "::set-output name=path::./app/build/outputs/apk/release/app-release-unsigned.apk"

      - name: "Sign APK"
        id: "apk"
        env:
          APK_PATH: ${{ steps.apk_unsigned.outputs.path }}
          KEYSTORE_FILE: ${{ steps.keystore.outputs.filePath }}
          KEYALIAS: ${{secrets.KEYALIAS}}
          MYAPP_RELEASE_KEY_PASSWORD: ${{secrets.MYAPP_RELEASE_KEY_PASSWORD}}
          MYAPP_RELEASE_STORE_PASSWORD: ${{secrets.MYAPP_RELEASE_STORE_PASSWORD}}
        run: |
          echo ${APK_PATH}
          mkdir -p ./app/release
          cp ${APK_PATH} ./app/release/apk-release.apk
          apksigner sign --ks ${KEYSTORE_FILE} --ks-key-alias ${KEYALIAS} --ks-pass env:MYAPP_RELEASE_STORE_PASSWORD --key-pass env:MYAPP_RELEASE_STORE_PASSWORD  ./app/release/apk-release.apk

      - name: "extract release"
        uses: actions/upload-artifact@master
        with:
          name: apk-release.apk
          path: ./app/release

############### Create Release #######################
  release:
    needs:
      - build_apk
      - build_lib
    runs-on: ubuntu-latest
    steps:

      - name: "Load apk"
        uses: actions/download-artifact@master
        with:
          name: apk-release.apk
          path: ./app/release

      - name: "Load Lib"
        uses: actions/download-artifact@master
        with:
          name: lib.jar
          path: ./lib/build/libs

      - name: Get Version
        id: get_version
        run: |
          VERSION=$(grep -oP "versionCode \d+" ./app/build.gradle | grep -oP "\d+")
          echo "::set-output name=versionNum::${VERSION}"

      - name: Display Version
        id: display_version
        env:
          VERSION: ${{ steps.get_version.outputs.versionNum }}
        run: |
           echo ${VERSION}

      - name: Tag version
        id: tag_version
        if: github.ref == 'refs/heads/master'
        uses: mathieudutour/github-tag-action@v5.5
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.get_version.outputs.versionNum }}

      - name: Create a GitHub release
        if: github.ref == 'refs/heads/master'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release APK ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

      - name: Upload APK Asset
        if: github.ref == 'refs/heads/master'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./app/release/apk-release.apk
          asset_name: app-release.apk
          asset_content_type: application/zip

      - name: Upload Lib Asset
        if: github.ref == 'refs/heads/master'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./lib/build/libs/lib.jar
          asset_name: app-release.apk
          asset_content_type: application/zip